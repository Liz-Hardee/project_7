string class:
this is my change

member:
char * array;     // the character array that holds the string
int  * cap        // the number of indexes in the array (includes '\0')
int  * charcount; // the number of characters in the array (without '\0')


needed member functions:

** Rowan
// default constructor (called when string is initialized)
string()

** Rowan
// copy constructor (initializes string to a passed string)
// INPUTS: const string passed by reference
string(const string &)

** Rowan
// copy constructor (initializes string to a passed char array)
// INPUTS: const string passed by reference
// FUNCTION: sets array value of string to passed char array
             sets charcount to the lenght of the passed char array
             sets cap to charcount + 1
string(const char *)

** Jimi
// destructor (sets members for string to nullptr)
~string()

** Jimi
// assingment operator (assigns the string to the passed string)
string & operator = (const string &)

** Jimi
// subscript operator (allows for reading specific indexes of string.array * Not For Writing *)
const char & operator [](int) const

** Jimi
// subscript operator (allows for reading/writing specific indexes of string.array)
char & operator [](int)

methods:

** Jimi
// delete array and set to a nullptr
void clear()

** Rowan
// takes an index to start and to end and returns a string of only characters between these
string * substr(int start, int end)

** Jimi
// adds passed string to the end of this string
void append(string)

** Rowan
// adds a new string to the middle of an exisiting one beginning at pos
void insert(int pos, const string str)

** Jimi
// resizes the string from the beginning
void resize(int new_size)

** Rowan
// allocates more capacity
reserve(int new_cap)

getters/setters:
** Jimi 
get_array()
int length()
int capacity()

** Rowan
set_array()
set_capacity()
set_charcount()




** Rowan
reference operators:
==
!=
<
<=
>
>=

** Jimi
stream operators:
<<
>>

--------------------------------------------------------------------------------

Doubly Linked List

data members:
int * size;
int * capacity;
string  * index;
element * next;
element * prev;
element * head;
element * tail;

JIMI
// default constructor
element();

JIMI
//destructor
~element();

ROWAN
//copy constructor
element(const element &);

ROWAN
//assignment operator
element & operator = (const element &)

JIMI
// output stream
friend std::ostream & operator << (std::ostream &, const list &);

JIMI
//input stream
friend std::istream & operator >> (std::istream &, list &);

ROWAN
//empty
//outputs whether the list is empty
bool is_empty() const;

JIMI
//subscript for reading
const element & operator [] (int) const

JIMI
//subscript for writing
element & operator [] (int);

ROWAN
//insert (positional)
bool insert(element *, int);

ROWAN
//insert (ordered)
bool insert(element *);

ROWAN ** MAYBE **
//erase all contents of the list
bool erase();

JIMI
// relational operators
bool operator <  (const element &, const element &)
bool operator <= (const element &, const element &)
bool operator == (const element &, const element &)
bool operator != (const element &, const element &)
bool operator >= (const element &, const element &)
bool operator >  (const element &, const element &)
